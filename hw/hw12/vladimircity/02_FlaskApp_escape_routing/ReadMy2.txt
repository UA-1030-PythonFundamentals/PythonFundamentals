===Name===	->	назва розділу
===some text	->	дії, що необхідно виконати
=====		->	логічне закінчення (розділу або файлу), відноситься до контексту
у вас з першого кроку має бути папка "virtenv" - вона персональна для кожного проекту, 
тому в цих матеріалах вона відображена не буде



===Step 2 ====
===Екранування HTML
 
Під час повернення HTMLю 
будь-які дані, внесені користувачем у адресний рядок,
мають бути екрановані, 
щоб захистити сайт від атак ін’єкціями.
 
Шаблони HTML, відтворені за допомогою Jinja,
що будуть представлені пізніше, 
зроблять це автоматично.
=== внесіть зміни в файл - flask_app/app.py

from markupsafe import escape
from flask import Flask


...

@app.route("/<name>")
def hello(name):
    return f"Hello, {escape(name)}!"

та перевірте, як працює метод escape()

http://127.0.0.1:5001/word
http://127.0.0.1:5001/flask
http://127.0.0.1:5001/python

<name>у маршруті фіксує значення з URL-адреси та передає його функції перегляду.
!!! побудова юрл здійснюється Маршрутизацією!!! 
Ці правила змінних пояснюються нижче.


===Маршрутизація===
Використовуйте декоратор route(), щоб прив’язати функцію до URL-адреси.
===додай ці 3 роути в файл app.py, щоб перевірити, як працює маршрутизація на практиці:

@app.route('/user/<username>')
def show_user_profile(username):
    # show the user profile for that user
    return f'User {escape(username)}'


@app.route('/post/<int:post_id>')
def show_post(post_id):
    # show the post with the given id, the id is an integer
    return f'Post {post_id}'


@app.route('/path/<path:subpath>')
def show_subpath(subpath):
    # show the subpath after /path/
    return f'Subpath {escape(subpath)}'



Правила змінних 

Ви можете додати змінні до URL-адреси. 
Потім ваша функція отримує змінні 
як аргумент ключового слова. 
За бажанням ви можете використовувати конвертер, щоб вказати тип аргументу, наприклад <converter:variable_name>.

Типи конвертерів:

string (за замовчуванням) приймає будь-який текст без косої риски
int - приймає додатні цілі числа
float -приймає позитивні значення з плаваючою комою
path - приймає, string але також приймає косі риски
uuid - приймає рядки «универсального уникального идентификатора»

http://127.0.0.1:5001/user/John
http://127.0.0.1:5001/post/12
http://127.0.0.1:5001/path/app1


===Унікальні URL-адреси та їх Поведінка.===
===додай ці 2 роути в файл app.py

@app.route('/projects/')
def projects():
    return 'The project page'


@app.route('/about')
def about():
    return 'The about page'

Це допомагає зберігати URL-адреси унікальними, та допомагає пошуковим системам 
уникати індексації однієї сторінки двічі.

